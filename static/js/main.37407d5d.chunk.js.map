{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","type","placeholder","React","memo","todo","onRemove","onToggle","style","id","text","checked","cn","onClick","todos","rowRenderer","index","key","width","height","rowCount","length","rowHeight","list","outline","createBulkTodos","array","i","push","toDoReducer","action","concat","filter","map","App","useReducer","undefined","dispatch","nextId","useRef","INIT_LENGTH","current","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.37407d5d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SCSS/TodoTemplate.scss'\r\n\r\nconst TodoTemplate = ({ children }) => {\r\n    return (\r\n        <div className=\"TodoTemplate\">\r\n            <div className=\"app-title\">일정 관리</div>\r\n            <div className=\"content\">{children}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoTemplate;","import React, {useState, useCallback} from 'react';\r\nimport {MdAdd} from 'react-icons/md';\r\nimport './SCSS/TodoInsert.scss';\r\n\r\nconst TodoInsert = ({onInsert})=>{\r\n    const [value, setValue]=useState('');\r\n    const onChange = useCallback((e)=>{\r\n        setValue(e.target.value);\r\n    }, []);\r\n    const onSubmit=useCallback(\r\n        (e)=>{\r\n            onInsert(value);\r\n            setValue('');\r\n            e.preventDefault();\r\n        },[onInsert, value],\r\n    )\r\n    return(\r\n        <form className=\"TodoInsert\" onSubmit={onSubmit}>\r\n            <input type=\"text\"\r\n            placeholder=\"할 일을 입력하세요\"\r\n            value={value}\r\n            onChange={onChange}\r\n            />\r\n            <button type=\"submit\"><MdAdd/></button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoInsert;","import React from 'react';\r\nimport {\r\n    MdCheckBoxOutlineBlank,\r\n    MdCheckBox,\r\n    MdRemoveCircleOutline,\r\n} from 'react-icons/md';\r\nimport cn from 'classnames'\r\nimport './SCSS/TodoListItem.scss'\r\n\r\nconst TodoListItem = ({todo, onRemove, onToggle, style}) => {\r\n    const {id, text, checked} = todo;\r\n    return (\r\n        <div className=\"TodoListItem-virtualized\" style={style}>\r\n        <div className=\"TodoListItem\">\r\n            <div className={cn('checkbox', {checked})} onClick={()=>onToggle(id)}>\r\n                {checked ? <MdCheckBox/>: <MdCheckBoxOutlineBlank/>}\r\n                <div className=\"text\">{text}</div>\r\n            </div>\r\n            <div className=\"remove\" onClick={()=>onRemove(id)}>\r\n                <MdRemoveCircleOutline/>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(TodoListItem);","import React, { useCallback } from 'react';\r\nimport {List} from 'react-virtualized';\r\nimport TodoListItem from './TodoListItem';\r\nimport './SCSS/TodoList.scss';\r\n\r\nconst TodoList = ({todos, onRemove, onToggle})=>{\r\n    const rowRenderer = useCallback(\r\n        ({index, key, style})=>{\r\n            const todo = todos[index];\r\n            return (\r\n                <TodoListItem \r\n                    todo={todo}\r\n                    key={key}\r\n                    onRemove={onRemove}\r\n                    onToggle={onToggle}\r\n                    style={style}\r\n                />\r\n            )\r\n        },[onRemove, onToggle, todos],\r\n    )\r\n\r\n    return (\r\n        <List \r\n            className=\"TodoList\"\r\n            width={512}\r\n            height={513}\r\n            rowCount={todos.length}\r\n            rowHeight={57}\r\n            rowRenderer={rowRenderer}\r\n            list={todos}\r\n            style={{outline:'none'}}\r\n            />\r\n    );\r\n}\r\n\r\nexport default React.memo(TodoList);","import React, { useRef, useCallback, useReducer } from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nconst INIT_LENGTH = 10;\n\nfunction createBulkTodos() {\n  const array = [];\n  for (let i = 1; i <= INIT_LENGTH; i++) {\n    array.push({\n      id: i,\n      text: `할 일 ${i}`,\n      checked: false,\n    });\n  }\n  return array;\n}\n\nfunction toDoReducer(todos, action) {\n  switch (action.type) {\n    case 'INSERT':\n      return todos.concat(action.todo);\n    case 'REMOVE':\n      return todos.filter(todo => todo.id !== action.id);\n    case 'TOGGLE':\n      return todos.map(todo =>\n      todo.id === action.id ? { ...todo, checked: !todo.checked } : todo\n    )\n    default:\n      return todos;\n  }\n}\n\nconst App = () => {\n  const [todos, dispatch] = useReducer(toDoReducer, undefined, createBulkTodos);\n  const nextId = useRef(INIT_LENGTH + 1);\n  const onInsert = useCallback(text =>{\n    const todo = {\n      id: nextId.current,\n      text,\n      checked: false,\n    }\n    dispatch({type: 'INSERT', todo})\n    nextId.current += 1;\n  }, []);\n  const onRemove = useCallback(id =>{\n    dispatch({type: 'REMOVE', id});\n  }, [])\n  const onToggle = useCallback(id =>{\n    dispatch({type: 'TOGGLE', id});\n  }, []);\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\n    </TodoTemplate>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}